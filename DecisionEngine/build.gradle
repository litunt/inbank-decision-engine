plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'inbank.decisionengine'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'project.name': project.getName(),
                    'project.version': version,
                    'java.version': JavaVersion.current(),
            ]
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.flywaydb:flyway-core'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
//    testImplementation 'org.testcontainers:rabbitmq'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    def imageNameProp = project.findProperty('imageName') ?: 'defaultImageName'
    imageName = imageNameProp
}
